
Task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001094  08001094  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001094  08001094  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001094  08001094  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001094  08001094  00011094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001098  08001098  00011098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800109c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000001cc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c0b  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000489  00000000  00000000  00020ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00021170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000125  00000000  00000000  00021310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002cdd  00000000  00000000  00021435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001698  00000000  00000000  00024112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009a78  00000000  00000000  000257aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000bc4  00000000  00000000  0002f224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0002fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ff4 	.word	0x08000ff4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08000ff4 	.word	0x08000ff4

080001c8 <main>:

uint32_t user_task[MAX_TASKS];

uint32_t task_handler[MAX_TASKS];
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80001cc:	f000 f946 	bl	800045c <enable_processor_faults>

	init_scheduler_stack(TASk_SCHEDULER);
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0x40>)
 80001d2:	f000 f8c3 	bl	800035c <init_scheduler_stack>

	task_handler[0] = (uint32_t)task_1;
 80001d6:	4a0d      	ldr	r2, [pc, #52]	; (800020c <main+0x44>)
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <main+0x48>)
 80001da:	601a      	str	r2, [r3, #0]
	task_handler[1] = (uint32_t)task_2;
 80001dc:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <main+0x4c>)
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <main+0x48>)
 80001e0:	605a      	str	r2, [r3, #4]
	task_handler[2] = (uint32_t)task_3;
 80001e2:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <main+0x50>)
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <main+0x48>)
 80001e6:	609a      	str	r2, [r3, #8]
	task_handler[3] = (uint32_t)task_4;
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <main+0x54>)
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <main+0x48>)
 80001ec:	60da      	str	r2, [r3, #12]
//	user_tasks[1].task_handler = task_2;
//	user_tasks[2].task_handler = task_3;
//	user_tasks[3].task_handler = task_4;


	init_tasks_stack();
 80001ee:	f000 f8b9 	bl	8000364 <init_tasks_stack>

	init_systick_timer(tick_s);
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <main+0x58>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f872 	bl	80002e0 <init_systick_timer>

	change_sp_to_psp();
 80001fc:	f000 f920 	bl	8000440 <change_sp_to_psp>

	task_1();
 8000200:	f000 f810 	bl	8000224 <task_1>

    /* Loop forever */
	for(;;);
 8000204:	e7fe      	b.n	8000204 <main+0x3c>
 8000206:	bf00      	nop
 8000208:	2001ec00 	.word	0x2001ec00
 800020c:	08000225 	.word	0x08000225
 8000210:	200000d8 	.word	0x200000d8
 8000214:	08000235 	.word	0x08000235
 8000218:	08000245 	.word	0x08000245
 800021c:	08000255 	.word	0x08000255
 8000220:	20000000 	.word	0x20000000

08000224 <task_1>:
}

void task_1(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Running task_1 \n");
 8000228:	4801      	ldr	r0, [pc, #4]	; (8000230 <task_1+0xc>)
 800022a:	f000 fb53 	bl	80008d4 <puts>
 800022e:	e7fb      	b.n	8000228 <task_1+0x4>
 8000230:	0800100c 	.word	0x0800100c

08000234 <task_2>:
	}

}

void task_2(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Running task_2 \n");
 8000238:	4801      	ldr	r0, [pc, #4]	; (8000240 <task_2+0xc>)
 800023a:	f000 fb4b 	bl	80008d4 <puts>
 800023e:	e7fb      	b.n	8000238 <task_2+0x4>
 8000240:	0800101c 	.word	0x0800101c

08000244 <task_3>:
	}

}

void task_3(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Running task_3 \n");
 8000248:	4801      	ldr	r0, [pc, #4]	; (8000250 <task_3+0xc>)
 800024a:	f000 fb43 	bl	80008d4 <puts>
 800024e:	e7fb      	b.n	8000248 <task_3+0x4>
 8000250:	0800102c 	.word	0x0800102c

08000254 <task_4>:
	}

}

void task_4(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Running task_4 \n");
 8000258:	4801      	ldr	r0, [pc, #4]	; (8000260 <task_4+0xc>)
 800025a:	f000 fb3b 	bl	80008d4 <puts>
 800025e:	e7fb      	b.n	8000258 <task_4+0x4>
 8000260:	0800103c 	.word	0x0800103c

08000264 <save_psp_value>:

}


void save_psp_value(uint32_t current_psp_value)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <save_psp_value+0x20>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4a05      	ldr	r2, [pc, #20]	; (8000288 <save_psp_value+0x24>)
 8000272:	011b      	lsls	r3, r3, #4
 8000274:	4413      	add	r3, r2
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	2000000c 	.word	0x2000000c
 8000288:	20000088 	.word	0x20000088

0800028c <update_current_task>:

void update_current_task(){
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0

	current_task++;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <update_current_task+0x28>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <update_current_task+0x28>)
 800029a:	701a      	strb	r2, [r3, #0]
	current_task %=MAX_TASKS;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <update_current_task+0x28>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	f003 0303 	and.w	r3, r3, #3
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <update_current_task+0x28>)
 80002a8:	701a      	strb	r2, [r3, #0]

}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	2000000c 	.word	0x2000000c

080002b8 <SysTick_Handler>:

__attribute ((naked)) void SysTick_Handler(void){

	/* save the context of current task 	 */
	__asm volatile("PUSH {LR}");
 80002b8:	b500      	push	{lr}
	//1. Get current running psp value
	__asm volatile ("MRS R0, PSP");
 80002ba:	f3ef 8009 	mrs	r0, PSP
	//2.using the PSP value store the SF2(R4 to R11)
	__asm volatile ("STMDB R0!,{R4-R11}");// stores the r4-r5 register in stack memory of this task
 80002be:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3. save the current value of psp
	__asm volatile ("BL save_psp_value ");
 80002c2:	f7ff ffcf 	bl	8000264 <save_psp_value>

	/*Retrieve the context of next task  */

	//1. decide the next task to run
	__asm volatile ("BL update_current_task");
 80002c6:	f7ff ffe1 	bl	800028c <update_current_task>

	//2. get the psp value
	__asm volatile ("BL get_psp_value");
 80002ca:	f000 f8a9 	bl	8000420 <get_psp_value>

	//3.using psp value retrieve SF2(R4 - R11)
	__asm volatile(" LDM R0!,{R4-R11}");
 80002ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update the PSP and exit

	__asm volatile("MSR PSP, R0");
 80002d2:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 80002d6:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80002da:	4770      	bx	lr

}
 80002dc:	bf00      	nop
	...

080002e0 <init_systick_timer>:

void init_systick_timer(uint32_t tick)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	// 16000000  divided by 1000 = 16000,
	// System runs 0.0625 micro seconds for each pulse signal
	// here we need the systic timer to run 1 ms
	// if we programmed the systick reload register to 16000 khz so 0.0625 * 16000 =1 ms

	uint32_t count_value = ((SYSTICK_CLK)/(tick))-1;
 80002e8:	4a19      	ldr	r2, [pc, #100]	; (8000350 <init_systick_timer+0x70>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f0:	3b01      	subs	r3, #1
 80002f2:	60fb      	str	r3, [r7, #12]
	//Clear the value of reload register upto 24 bits
	*psrvr 	&= ~(0x00FFFFFF);
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <init_systick_timer+0x74>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <init_systick_timer+0x74>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000302:	601a      	str	r2, [r3, #0]

	//set the count value in reload register
	*psrvr |= count_value;
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <init_systick_timer+0x74>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <init_systick_timer+0x74>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	430a      	orrs	r2, r1
 8000312:	601a      	str	r2, [r3, #0]


	*pscsr |= 1<<1; // Enables SysTick exception request
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <init_systick_timer+0x78>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <init_systick_timer+0x78>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f042 0202 	orr.w	r2, r2, #2
 8000322:	601a      	str	r2, [r3, #0]
	*pscsr |= 1<<2; // Set the processor clock
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <init_systick_timer+0x78>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <init_systick_timer+0x78>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f042 0204 	orr.w	r2, r2, #4
 8000332:	601a      	str	r2, [r3, #0]


	*pscsr |= 1<<0; // Enables the counter
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <init_systick_timer+0x78>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b07      	ldr	r3, [pc, #28]	; (8000358 <init_systick_timer+0x78>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f042 0201 	orr.w	r2, r2, #1
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	00f42400 	.word	0x00f42400
 8000354:	20000004 	.word	0x20000004
 8000358:	20000008 	.word	0x20000008

0800035c <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
    // __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
	__asm volatile ("MSR MSP, R0");
 800035c:	f380 8808 	msr	MSP, r0
     __asm volatile("BX LR");
 8000360:	4770      	bx	lr

}
 8000362:	bf00      	nop

08000364 <init_tasks_stack>:

/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
//	user_tasks[0].psp_value = TASK1_START;
//	user_tasks[1].psp_value = TASk2_START;
//	user_tasks[2].psp_value = TASk3_START;
//	user_tasks[3].psp_value = TASk4_START;

	user_task[0] = TASK1_START;
 800036a:	4b26      	ldr	r3, [pc, #152]	; (8000404 <init_tasks_stack+0xa0>)
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <init_tasks_stack+0xa4>)
 800036e:	601a      	str	r2, [r3, #0]
	user_task[1] = TASK2_START;
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <init_tasks_stack+0xa0>)
 8000372:	4a26      	ldr	r2, [pc, #152]	; (800040c <init_tasks_stack+0xa8>)
 8000374:	605a      	str	r2, [r3, #4]
	user_task[2] = TASK3_START;
 8000376:	4b23      	ldr	r3, [pc, #140]	; (8000404 <init_tasks_stack+0xa0>)
 8000378:	4a25      	ldr	r2, [pc, #148]	; (8000410 <init_tasks_stack+0xac>)
 800037a:	609a      	str	r2, [r3, #8]
	user_task[3] = TASK4_START;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <init_tasks_stack+0xa0>)
 800037e:	4a25      	ldr	r2, [pc, #148]	; (8000414 <init_tasks_stack+0xb0>)
 8000380:	60da      	str	r2, [r3, #12]
//	user_tasks[0].task_handler = idle_task;


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 8000382:	2300      	movs	r3, #0
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	e033      	b.n	80003f0 <init_tasks_stack+0x8c>
	{
		pPSP = 	(uint32_t*) user_task[i];
 8000388:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <init_tasks_stack+0xa0>)
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000390:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3b04      	subs	r3, #4
 8000396:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800039e:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3b04      	subs	r3, #4
 80003a4:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) task_handler[i];
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <init_tasks_stack+0xb4>)
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3b04      	subs	r3, #4
 80003b6:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f06f 0202 	mvn.w	r2, #2
 80003be:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	e008      	b.n	80003d8 <init_tasks_stack+0x74>
		{
			pPSP--;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3b04      	subs	r3, #4
 80003ca:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b0c      	cmp	r3, #12
 80003dc:	ddf3      	ble.n	80003c6 <init_tasks_stack+0x62>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	490e      	ldr	r1, [pc, #56]	; (800041c <init_tasks_stack+0xb8>)
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	011b      	lsls	r3, r3, #4
 80003e6:	440b      	add	r3, r1
 80003e8:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	3301      	adds	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	ddc8      	ble.n	8000388 <init_tasks_stack+0x24>


	}

}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	200000c8 	.word	0x200000c8
 8000408:	20020000 	.word	0x20020000
 800040c:	2001fc00 	.word	0x2001fc00
 8000410:	2001f800 	.word	0x2001f800
 8000414:	2001f400 	.word	0x2001f400
 8000418:	200000d8 	.word	0x200000d8
 800041c:	20000088 	.word	0x20000088

08000420 <get_psp_value>:

uint32_t  get_psp_value(){
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <get_psp_value+0x18>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <get_psp_value+0x1c>)
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	4413      	add	r3, r2
 800042e:	681b      	ldr	r3, [r3, #0]

}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	2000000c 	.word	0x2000000c
 800043c:	20000088 	.word	0x20000088

08000440 <change_sp_to_psp>:

 __attribute ((naked))void change_sp_to_psp()
 {

	__asm volatile ("PUSH {LR}");//preserve which connect back to main();
 8000440:	b500      	push	{lr}
	 //initiliaze a psp
	 // this call make a LR corrupte, first u need to push a lr
	__asm volatile ("BL get_psp_value");//gets the returned value from the fucntion of get_psp_value,Stores the value into R0.
 8000442:	f7ff ffed 	bl	8000420 <get_psp_value>
	__asm volatile("MSR PSP, R0");
 8000446:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 800044a:	f85d eb04 	ldr.w	lr, [sp], #4
	//change the MSP to PSP, pass a value that enables PSP.
	__asm volatile("MOV R0,#0x02");
 800044e:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 8000452:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000456:	4770      	bx	lr

 }
 8000458:	bf00      	nop
	...

0800045c <enable_processor_faults>:




void enable_processor_faults()
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <enable_processor_faults+0x38>)
 8000464:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	e000ed24 	.word	0xe000ed24

08000498 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 800049c:	4801      	ldr	r0, [pc, #4]	; (80004a4 <HardFault_Handler+0xc>)
 800049e:	f000 fa19 	bl	80008d4 <puts>
	while(1);
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0xa>
 80004a4:	0800104c 	.word	0x0800104c

080004a8 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80004ac:	4801      	ldr	r0, [pc, #4]	; (80004b4 <MemManage_Handler+0xc>)
 80004ae:	f000 fa11 	bl	80008d4 <puts>
	while(1);
 80004b2:	e7fe      	b.n	80004b2 <MemManage_Handler+0xa>
 80004b4:	08001064 	.word	0x08001064

080004b8 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80004bc:	4801      	ldr	r0, [pc, #4]	; (80004c4 <BusFault_Handler+0xc>)
 80004be:	f000 fa09 	bl	80008d4 <puts>
	while(1);
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0xa>
 80004c4:	0800107c 	.word	0x0800107c

080004c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <ITM_SendChar+0x44>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <ITM_SendChar+0x44>)
 80004d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <ITM_SendChar+0x48>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <ITM_SendChar+0x48>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ea:	bf00      	nop
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f8      	beq.n	80004ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
  }

  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffad 	bl	80004c8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
  }
  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ac:	605a      	str	r2, [r3, #4]
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <_isatty>:

int _isatty(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f000 fa8a 	bl	8000b30 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20020000 	.word	0x20020000
 8000648:	00000400 	.word	0x00000400
 800064c:	200000e8 	.word	0x200000e8
 8000650:	20000238 	.word	0x20000238

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	; (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 fa5b 	bl	8000b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fd9f 	bl	80001c8 <main>

0800068a <LoopForever>:

LoopForever:
  b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000698:	0800109c 	.word	0x0800109c
  ldr r2, =_sbss
 800069c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80006a0:	20000238 	.word	0x20000238

080006a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC_IRQHandler>
	...

080006a8 <std>:
 80006a8:	2300      	movs	r3, #0
 80006aa:	b510      	push	{r4, lr}
 80006ac:	4604      	mov	r4, r0
 80006ae:	e9c0 3300 	strd	r3, r3, [r0]
 80006b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006b6:	6083      	str	r3, [r0, #8]
 80006b8:	8181      	strh	r1, [r0, #12]
 80006ba:	6643      	str	r3, [r0, #100]	; 0x64
 80006bc:	81c2      	strh	r2, [r0, #14]
 80006be:	6183      	str	r3, [r0, #24]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2208      	movs	r2, #8
 80006c4:	305c      	adds	r0, #92	; 0x5c
 80006c6:	f000 f9e5 	bl	8000a94 <memset>
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <std+0x58>)
 80006cc:	6263      	str	r3, [r4, #36]	; 0x24
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <std+0x5c>)
 80006d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <std+0x60>)
 80006d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <std+0x64>)
 80006d8:	6323      	str	r3, [r4, #48]	; 0x30
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <std+0x68>)
 80006dc:	6224      	str	r4, [r4, #32]
 80006de:	429c      	cmp	r4, r3
 80006e0:	d006      	beq.n	80006f0 <std+0x48>
 80006e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006e6:	4294      	cmp	r4, r2
 80006e8:	d002      	beq.n	80006f0 <std+0x48>
 80006ea:	33d0      	adds	r3, #208	; 0xd0
 80006ec:	429c      	cmp	r4, r3
 80006ee:	d105      	bne.n	80006fc <std+0x54>
 80006f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f8:	f000 ba44 	b.w	8000b84 <__retarget_lock_init_recursive>
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	bf00      	nop
 8000700:	080008e5 	.word	0x080008e5
 8000704:	08000907 	.word	0x08000907
 8000708:	0800093f 	.word	0x0800093f
 800070c:	08000963 	.word	0x08000963
 8000710:	200000ec 	.word	0x200000ec

08000714 <stdio_exit_handler>:
 8000714:	4a02      	ldr	r2, [pc, #8]	; (8000720 <stdio_exit_handler+0xc>)
 8000716:	4903      	ldr	r1, [pc, #12]	; (8000724 <stdio_exit_handler+0x10>)
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <stdio_exit_handler+0x14>)
 800071a:	f000 b869 	b.w	80007f0 <_fwalk_sglue>
 800071e:	bf00      	nop
 8000720:	20000010 	.word	0x20000010
 8000724:	08000e7d 	.word	0x08000e7d
 8000728:	2000001c 	.word	0x2000001c

0800072c <cleanup_stdio>:
 800072c:	6841      	ldr	r1, [r0, #4]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <cleanup_stdio+0x34>)
 8000730:	4299      	cmp	r1, r3
 8000732:	b510      	push	{r4, lr}
 8000734:	4604      	mov	r4, r0
 8000736:	d001      	beq.n	800073c <cleanup_stdio+0x10>
 8000738:	f000 fba0 	bl	8000e7c <_fflush_r>
 800073c:	68a1      	ldr	r1, [r4, #8]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <cleanup_stdio+0x38>)
 8000740:	4299      	cmp	r1, r3
 8000742:	d002      	beq.n	800074a <cleanup_stdio+0x1e>
 8000744:	4620      	mov	r0, r4
 8000746:	f000 fb99 	bl	8000e7c <_fflush_r>
 800074a:	68e1      	ldr	r1, [r4, #12]
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <cleanup_stdio+0x3c>)
 800074e:	4299      	cmp	r1, r3
 8000750:	d004      	beq.n	800075c <cleanup_stdio+0x30>
 8000752:	4620      	mov	r0, r4
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f000 bb90 	b.w	8000e7c <_fflush_r>
 800075c:	bd10      	pop	{r4, pc}
 800075e:	bf00      	nop
 8000760:	200000ec 	.word	0x200000ec
 8000764:	20000154 	.word	0x20000154
 8000768:	200001bc 	.word	0x200001bc

0800076c <global_stdio_init.part.0>:
 800076c:	b510      	push	{r4, lr}
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <global_stdio_init.part.0+0x30>)
 8000770:	4c0b      	ldr	r4, [pc, #44]	; (80007a0 <global_stdio_init.part.0+0x34>)
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <global_stdio_init.part.0+0x38>)
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4620      	mov	r0, r4
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	f7ff ff94 	bl	80006a8 <std>
 8000780:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000784:	2201      	movs	r2, #1
 8000786:	2109      	movs	r1, #9
 8000788:	f7ff ff8e 	bl	80006a8 <std>
 800078c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000790:	2202      	movs	r2, #2
 8000792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000796:	2112      	movs	r1, #18
 8000798:	f7ff bf86 	b.w	80006a8 <std>
 800079c:	20000224 	.word	0x20000224
 80007a0:	200000ec 	.word	0x200000ec
 80007a4:	08000715 	.word	0x08000715

080007a8 <__sfp_lock_acquire>:
 80007a8:	4801      	ldr	r0, [pc, #4]	; (80007b0 <__sfp_lock_acquire+0x8>)
 80007aa:	f000 b9ec 	b.w	8000b86 <__retarget_lock_acquire_recursive>
 80007ae:	bf00      	nop
 80007b0:	2000022d 	.word	0x2000022d

080007b4 <__sfp_lock_release>:
 80007b4:	4801      	ldr	r0, [pc, #4]	; (80007bc <__sfp_lock_release+0x8>)
 80007b6:	f000 b9e7 	b.w	8000b88 <__retarget_lock_release_recursive>
 80007ba:	bf00      	nop
 80007bc:	2000022d 	.word	0x2000022d

080007c0 <__sinit>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
 80007c4:	f7ff fff0 	bl	80007a8 <__sfp_lock_acquire>
 80007c8:	6a23      	ldr	r3, [r4, #32]
 80007ca:	b11b      	cbz	r3, 80007d4 <__sinit+0x14>
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f7ff bff0 	b.w	80007b4 <__sfp_lock_release>
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <__sinit+0x28>)
 80007d6:	6223      	str	r3, [r4, #32]
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__sinit+0x2c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f5      	bne.n	80007cc <__sinit+0xc>
 80007e0:	f7ff ffc4 	bl	800076c <global_stdio_init.part.0>
 80007e4:	e7f2      	b.n	80007cc <__sinit+0xc>
 80007e6:	bf00      	nop
 80007e8:	0800072d 	.word	0x0800072d
 80007ec:	20000224 	.word	0x20000224

080007f0 <_fwalk_sglue>:
 80007f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f4:	4607      	mov	r7, r0
 80007f6:	4688      	mov	r8, r1
 80007f8:	4614      	mov	r4, r2
 80007fa:	2600      	movs	r6, #0
 80007fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000800:	f1b9 0901 	subs.w	r9, r9, #1
 8000804:	d505      	bpl.n	8000812 <_fwalk_sglue+0x22>
 8000806:	6824      	ldr	r4, [r4, #0]
 8000808:	2c00      	cmp	r4, #0
 800080a:	d1f7      	bne.n	80007fc <_fwalk_sglue+0xc>
 800080c:	4630      	mov	r0, r6
 800080e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000812:	89ab      	ldrh	r3, [r5, #12]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d907      	bls.n	8000828 <_fwalk_sglue+0x38>
 8000818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800081c:	3301      	adds	r3, #1
 800081e:	d003      	beq.n	8000828 <_fwalk_sglue+0x38>
 8000820:	4629      	mov	r1, r5
 8000822:	4638      	mov	r0, r7
 8000824:	47c0      	blx	r8
 8000826:	4306      	orrs	r6, r0
 8000828:	3568      	adds	r5, #104	; 0x68
 800082a:	e7e9      	b.n	8000800 <_fwalk_sglue+0x10>

0800082c <_puts_r>:
 800082c:	6a03      	ldr	r3, [r0, #32]
 800082e:	b570      	push	{r4, r5, r6, lr}
 8000830:	6884      	ldr	r4, [r0, #8]
 8000832:	4605      	mov	r5, r0
 8000834:	460e      	mov	r6, r1
 8000836:	b90b      	cbnz	r3, 800083c <_puts_r+0x10>
 8000838:	f7ff ffc2 	bl	80007c0 <__sinit>
 800083c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800083e:	07db      	lsls	r3, r3, #31
 8000840:	d405      	bmi.n	800084e <_puts_r+0x22>
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	0598      	lsls	r0, r3, #22
 8000846:	d402      	bmi.n	800084e <_puts_r+0x22>
 8000848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800084a:	f000 f99c 	bl	8000b86 <__retarget_lock_acquire_recursive>
 800084e:	89a3      	ldrh	r3, [r4, #12]
 8000850:	0719      	lsls	r1, r3, #28
 8000852:	d513      	bpl.n	800087c <_puts_r+0x50>
 8000854:	6923      	ldr	r3, [r4, #16]
 8000856:	b18b      	cbz	r3, 800087c <_puts_r+0x50>
 8000858:	3e01      	subs	r6, #1
 800085a:	68a3      	ldr	r3, [r4, #8]
 800085c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000860:	3b01      	subs	r3, #1
 8000862:	60a3      	str	r3, [r4, #8]
 8000864:	b9e9      	cbnz	r1, 80008a2 <_puts_r+0x76>
 8000866:	2b00      	cmp	r3, #0
 8000868:	da2e      	bge.n	80008c8 <_puts_r+0x9c>
 800086a:	4622      	mov	r2, r4
 800086c:	210a      	movs	r1, #10
 800086e:	4628      	mov	r0, r5
 8000870:	f000 f87b 	bl	800096a <__swbuf_r>
 8000874:	3001      	adds	r0, #1
 8000876:	d007      	beq.n	8000888 <_puts_r+0x5c>
 8000878:	250a      	movs	r5, #10
 800087a:	e007      	b.n	800088c <_puts_r+0x60>
 800087c:	4621      	mov	r1, r4
 800087e:	4628      	mov	r0, r5
 8000880:	f000 f8b0 	bl	80009e4 <__swsetup_r>
 8000884:	2800      	cmp	r0, #0
 8000886:	d0e7      	beq.n	8000858 <_puts_r+0x2c>
 8000888:	f04f 35ff 	mov.w	r5, #4294967295
 800088c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800088e:	07da      	lsls	r2, r3, #31
 8000890:	d405      	bmi.n	800089e <_puts_r+0x72>
 8000892:	89a3      	ldrh	r3, [r4, #12]
 8000894:	059b      	lsls	r3, r3, #22
 8000896:	d402      	bmi.n	800089e <_puts_r+0x72>
 8000898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800089a:	f000 f975 	bl	8000b88 <__retarget_lock_release_recursive>
 800089e:	4628      	mov	r0, r5
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da04      	bge.n	80008b0 <_puts_r+0x84>
 80008a6:	69a2      	ldr	r2, [r4, #24]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dc06      	bgt.n	80008ba <_puts_r+0x8e>
 80008ac:	290a      	cmp	r1, #10
 80008ae:	d004      	beq.n	80008ba <_puts_r+0x8e>
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	6022      	str	r2, [r4, #0]
 80008b6:	7019      	strb	r1, [r3, #0]
 80008b8:	e7cf      	b.n	800085a <_puts_r+0x2e>
 80008ba:	4622      	mov	r2, r4
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f854 	bl	800096a <__swbuf_r>
 80008c2:	3001      	adds	r0, #1
 80008c4:	d1c9      	bne.n	800085a <_puts_r+0x2e>
 80008c6:	e7df      	b.n	8000888 <_puts_r+0x5c>
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	250a      	movs	r5, #10
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	6022      	str	r2, [r4, #0]
 80008d0:	701d      	strb	r5, [r3, #0]
 80008d2:	e7db      	b.n	800088c <_puts_r+0x60>

080008d4 <puts>:
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <puts+0xc>)
 80008d6:	4601      	mov	r1, r0
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f7ff bfa7 	b.w	800082c <_puts_r>
 80008de:	bf00      	nop
 80008e0:	20000068 	.word	0x20000068

080008e4 <__sread>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	460c      	mov	r4, r1
 80008e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ec:	f000 f8fc 	bl	8000ae8 <_read_r>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bfab      	itete	ge
 80008f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008f6:	89a3      	ldrhlt	r3, [r4, #12]
 80008f8:	181b      	addge	r3, r3, r0
 80008fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008fe:	bfac      	ite	ge
 8000900:	6563      	strge	r3, [r4, #84]	; 0x54
 8000902:	81a3      	strhlt	r3, [r4, #12]
 8000904:	bd10      	pop	{r4, pc}

08000906 <__swrite>:
 8000906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800090a:	461f      	mov	r7, r3
 800090c:	898b      	ldrh	r3, [r1, #12]
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	4605      	mov	r5, r0
 8000912:	460c      	mov	r4, r1
 8000914:	4616      	mov	r6, r2
 8000916:	d505      	bpl.n	8000924 <__swrite+0x1e>
 8000918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800091c:	2302      	movs	r3, #2
 800091e:	2200      	movs	r2, #0
 8000920:	f000 f8d0 	bl	8000ac4 <_lseek_r>
 8000924:	89a3      	ldrh	r3, [r4, #12]
 8000926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800092a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800092e:	81a3      	strh	r3, [r4, #12]
 8000930:	4632      	mov	r2, r6
 8000932:	463b      	mov	r3, r7
 8000934:	4628      	mov	r0, r5
 8000936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800093a:	f000 b8e7 	b.w	8000b0c <_write_r>

0800093e <__sseek>:
 800093e:	b510      	push	{r4, lr}
 8000940:	460c      	mov	r4, r1
 8000942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000946:	f000 f8bd 	bl	8000ac4 <_lseek_r>
 800094a:	1c43      	adds	r3, r0, #1
 800094c:	89a3      	ldrh	r3, [r4, #12]
 800094e:	bf15      	itete	ne
 8000950:	6560      	strne	r0, [r4, #84]	; 0x54
 8000952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800095a:	81a3      	strheq	r3, [r4, #12]
 800095c:	bf18      	it	ne
 800095e:	81a3      	strhne	r3, [r4, #12]
 8000960:	bd10      	pop	{r4, pc}

08000962 <__sclose>:
 8000962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000966:	f000 b89d 	b.w	8000aa4 <_close_r>

0800096a <__swbuf_r>:
 800096a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096c:	460e      	mov	r6, r1
 800096e:	4614      	mov	r4, r2
 8000970:	4605      	mov	r5, r0
 8000972:	b118      	cbz	r0, 800097c <__swbuf_r+0x12>
 8000974:	6a03      	ldr	r3, [r0, #32]
 8000976:	b90b      	cbnz	r3, 800097c <__swbuf_r+0x12>
 8000978:	f7ff ff22 	bl	80007c0 <__sinit>
 800097c:	69a3      	ldr	r3, [r4, #24]
 800097e:	60a3      	str	r3, [r4, #8]
 8000980:	89a3      	ldrh	r3, [r4, #12]
 8000982:	071a      	lsls	r2, r3, #28
 8000984:	d525      	bpl.n	80009d2 <__swbuf_r+0x68>
 8000986:	6923      	ldr	r3, [r4, #16]
 8000988:	b31b      	cbz	r3, 80009d2 <__swbuf_r+0x68>
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	6922      	ldr	r2, [r4, #16]
 800098e:	1a98      	subs	r0, r3, r2
 8000990:	6963      	ldr	r3, [r4, #20]
 8000992:	b2f6      	uxtb	r6, r6
 8000994:	4283      	cmp	r3, r0
 8000996:	4637      	mov	r7, r6
 8000998:	dc04      	bgt.n	80009a4 <__swbuf_r+0x3a>
 800099a:	4621      	mov	r1, r4
 800099c:	4628      	mov	r0, r5
 800099e:	f000 fa6d 	bl	8000e7c <_fflush_r>
 80009a2:	b9e0      	cbnz	r0, 80009de <__swbuf_r+0x74>
 80009a4:	68a3      	ldr	r3, [r4, #8]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	60a3      	str	r3, [r4, #8]
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	6022      	str	r2, [r4, #0]
 80009b0:	701e      	strb	r6, [r3, #0]
 80009b2:	6962      	ldr	r2, [r4, #20]
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d004      	beq.n	80009c4 <__swbuf_r+0x5a>
 80009ba:	89a3      	ldrh	r3, [r4, #12]
 80009bc:	07db      	lsls	r3, r3, #31
 80009be:	d506      	bpl.n	80009ce <__swbuf_r+0x64>
 80009c0:	2e0a      	cmp	r6, #10
 80009c2:	d104      	bne.n	80009ce <__swbuf_r+0x64>
 80009c4:	4621      	mov	r1, r4
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fa58 	bl	8000e7c <_fflush_r>
 80009cc:	b938      	cbnz	r0, 80009de <__swbuf_r+0x74>
 80009ce:	4638      	mov	r0, r7
 80009d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d2:	4621      	mov	r1, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 f805 	bl	80009e4 <__swsetup_r>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d0d5      	beq.n	800098a <__swbuf_r+0x20>
 80009de:	f04f 37ff 	mov.w	r7, #4294967295
 80009e2:	e7f4      	b.n	80009ce <__swbuf_r+0x64>

080009e4 <__swsetup_r>:
 80009e4:	b538      	push	{r3, r4, r5, lr}
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <__swsetup_r+0xac>)
 80009e8:	4605      	mov	r5, r0
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	460c      	mov	r4, r1
 80009ee:	b118      	cbz	r0, 80009f8 <__swsetup_r+0x14>
 80009f0:	6a03      	ldr	r3, [r0, #32]
 80009f2:	b90b      	cbnz	r3, 80009f8 <__swsetup_r+0x14>
 80009f4:	f7ff fee4 	bl	80007c0 <__sinit>
 80009f8:	89a3      	ldrh	r3, [r4, #12]
 80009fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009fe:	0718      	lsls	r0, r3, #28
 8000a00:	d422      	bmi.n	8000a48 <__swsetup_r+0x64>
 8000a02:	06d9      	lsls	r1, r3, #27
 8000a04:	d407      	bmi.n	8000a16 <__swsetup_r+0x32>
 8000a06:	2309      	movs	r3, #9
 8000a08:	602b      	str	r3, [r5, #0]
 8000a0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a0e:	81a3      	strh	r3, [r4, #12]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	e034      	b.n	8000a80 <__swsetup_r+0x9c>
 8000a16:	0758      	lsls	r0, r3, #29
 8000a18:	d512      	bpl.n	8000a40 <__swsetup_r+0x5c>
 8000a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a1c:	b141      	cbz	r1, 8000a30 <__swsetup_r+0x4c>
 8000a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a22:	4299      	cmp	r1, r3
 8000a24:	d002      	beq.n	8000a2c <__swsetup_r+0x48>
 8000a26:	4628      	mov	r0, r5
 8000a28:	f000 f8b0 	bl	8000b8c <_free_r>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a36:	81a3      	strh	r3, [r4, #12]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6063      	str	r3, [r4, #4]
 8000a3c:	6923      	ldr	r3, [r4, #16]
 8000a3e:	6023      	str	r3, [r4, #0]
 8000a40:	89a3      	ldrh	r3, [r4, #12]
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	81a3      	strh	r3, [r4, #12]
 8000a48:	6923      	ldr	r3, [r4, #16]
 8000a4a:	b94b      	cbnz	r3, 8000a60 <__swsetup_r+0x7c>
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a56:	d003      	beq.n	8000a60 <__swsetup_r+0x7c>
 8000a58:	4621      	mov	r1, r4
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f000 fa5c 	bl	8000f18 <__smakebuf_r>
 8000a60:	89a0      	ldrh	r0, [r4, #12]
 8000a62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a66:	f010 0301 	ands.w	r3, r0, #1
 8000a6a:	d00a      	beq.n	8000a82 <__swsetup_r+0x9e>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60a3      	str	r3, [r4, #8]
 8000a70:	6963      	ldr	r3, [r4, #20]
 8000a72:	425b      	negs	r3, r3
 8000a74:	61a3      	str	r3, [r4, #24]
 8000a76:	6923      	ldr	r3, [r4, #16]
 8000a78:	b943      	cbnz	r3, 8000a8c <__swsetup_r+0xa8>
 8000a7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a7e:	d1c4      	bne.n	8000a0a <__swsetup_r+0x26>
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
 8000a82:	0781      	lsls	r1, r0, #30
 8000a84:	bf58      	it	pl
 8000a86:	6963      	ldrpl	r3, [r4, #20]
 8000a88:	60a3      	str	r3, [r4, #8]
 8000a8a:	e7f4      	b.n	8000a76 <__swsetup_r+0x92>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e7f7      	b.n	8000a80 <__swsetup_r+0x9c>
 8000a90:	20000068 	.word	0x20000068

08000a94 <memset>:
 8000a94:	4402      	add	r2, r0
 8000a96:	4603      	mov	r3, r0
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d100      	bne.n	8000a9e <memset+0xa>
 8000a9c:	4770      	bx	lr
 8000a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000aa2:	e7f9      	b.n	8000a98 <memset+0x4>

08000aa4 <_close_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4d06      	ldr	r5, [pc, #24]	; (8000ac0 <_close_r+0x1c>)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	4604      	mov	r4, r0
 8000aac:	4608      	mov	r0, r1
 8000aae:	602b      	str	r3, [r5, #0]
 8000ab0:	f7ff fd69 	bl	8000586 <_close>
 8000ab4:	1c43      	adds	r3, r0, #1
 8000ab6:	d102      	bne.n	8000abe <_close_r+0x1a>
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	b103      	cbz	r3, 8000abe <_close_r+0x1a>
 8000abc:	6023      	str	r3, [r4, #0]
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
 8000ac0:	20000228 	.word	0x20000228

08000ac4 <_lseek_r>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	4d07      	ldr	r5, [pc, #28]	; (8000ae4 <_lseek_r+0x20>)
 8000ac8:	4604      	mov	r4, r0
 8000aca:	4608      	mov	r0, r1
 8000acc:	4611      	mov	r1, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	602a      	str	r2, [r5, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f7ff fd7b 	bl	80005ce <_lseek>
 8000ad8:	1c43      	adds	r3, r0, #1
 8000ada:	d102      	bne.n	8000ae2 <_lseek_r+0x1e>
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	b103      	cbz	r3, 8000ae2 <_lseek_r+0x1e>
 8000ae0:	6023      	str	r3, [r4, #0]
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
 8000ae4:	20000228 	.word	0x20000228

08000ae8 <_read_r>:
 8000ae8:	b538      	push	{r3, r4, r5, lr}
 8000aea:	4d07      	ldr	r5, [pc, #28]	; (8000b08 <_read_r+0x20>)
 8000aec:	4604      	mov	r4, r0
 8000aee:	4608      	mov	r0, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	602a      	str	r2, [r5, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	f7ff fd0c 	bl	8000514 <_read>
 8000afc:	1c43      	adds	r3, r0, #1
 8000afe:	d102      	bne.n	8000b06 <_read_r+0x1e>
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	b103      	cbz	r3, 8000b06 <_read_r+0x1e>
 8000b04:	6023      	str	r3, [r4, #0]
 8000b06:	bd38      	pop	{r3, r4, r5, pc}
 8000b08:	20000228 	.word	0x20000228

08000b0c <_write_r>:
 8000b0c:	b538      	push	{r3, r4, r5, lr}
 8000b0e:	4d07      	ldr	r5, [pc, #28]	; (8000b2c <_write_r+0x20>)
 8000b10:	4604      	mov	r4, r0
 8000b12:	4608      	mov	r0, r1
 8000b14:	4611      	mov	r1, r2
 8000b16:	2200      	movs	r2, #0
 8000b18:	602a      	str	r2, [r5, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	f7ff fd17 	bl	800054e <_write>
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	d102      	bne.n	8000b2a <_write_r+0x1e>
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	b103      	cbz	r3, 8000b2a <_write_r+0x1e>
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
 8000b2c:	20000228 	.word	0x20000228

08000b30 <__errno>:
 8000b30:	4b01      	ldr	r3, [pc, #4]	; (8000b38 <__errno+0x8>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000068 	.word	0x20000068

08000b3c <__libc_init_array>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4d0d      	ldr	r5, [pc, #52]	; (8000b74 <__libc_init_array+0x38>)
 8000b40:	4c0d      	ldr	r4, [pc, #52]	; (8000b78 <__libc_init_array+0x3c>)
 8000b42:	1b64      	subs	r4, r4, r5
 8000b44:	10a4      	asrs	r4, r4, #2
 8000b46:	2600      	movs	r6, #0
 8000b48:	42a6      	cmp	r6, r4
 8000b4a:	d109      	bne.n	8000b60 <__libc_init_array+0x24>
 8000b4c:	4d0b      	ldr	r5, [pc, #44]	; (8000b7c <__libc_init_array+0x40>)
 8000b4e:	4c0c      	ldr	r4, [pc, #48]	; (8000b80 <__libc_init_array+0x44>)
 8000b50:	f000 fa50 	bl	8000ff4 <_init>
 8000b54:	1b64      	subs	r4, r4, r5
 8000b56:	10a4      	asrs	r4, r4, #2
 8000b58:	2600      	movs	r6, #0
 8000b5a:	42a6      	cmp	r6, r4
 8000b5c:	d105      	bne.n	8000b6a <__libc_init_array+0x2e>
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b64:	4798      	blx	r3
 8000b66:	3601      	adds	r6, #1
 8000b68:	e7ee      	b.n	8000b48 <__libc_init_array+0xc>
 8000b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6e:	4798      	blx	r3
 8000b70:	3601      	adds	r6, #1
 8000b72:	e7f2      	b.n	8000b5a <__libc_init_array+0x1e>
 8000b74:	08001094 	.word	0x08001094
 8000b78:	08001094 	.word	0x08001094
 8000b7c:	08001094 	.word	0x08001094
 8000b80:	08001098 	.word	0x08001098

08000b84 <__retarget_lock_init_recursive>:
 8000b84:	4770      	bx	lr

08000b86 <__retarget_lock_acquire_recursive>:
 8000b86:	4770      	bx	lr

08000b88 <__retarget_lock_release_recursive>:
 8000b88:	4770      	bx	lr
	...

08000b8c <_free_r>:
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4605      	mov	r5, r0
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d041      	beq.n	8000c18 <_free_r+0x8c>
 8000b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b98:	1f0c      	subs	r4, r1, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bfb8      	it	lt
 8000b9e:	18e4      	addlt	r4, r4, r3
 8000ba0:	f000 f8de 	bl	8000d60 <__malloc_lock>
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <_free_r+0x90>)
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	b933      	cbnz	r3, 8000bb8 <_free_r+0x2c>
 8000baa:	6063      	str	r3, [r4, #4]
 8000bac:	6014      	str	r4, [r2, #0]
 8000bae:	4628      	mov	r0, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b8da 	b.w	8000d6c <__malloc_unlock>
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	d908      	bls.n	8000bce <_free_r+0x42>
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	1821      	adds	r1, r4, r0
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	bf01      	itttt	eq
 8000bc4:	6819      	ldreq	r1, [r3, #0]
 8000bc6:	685b      	ldreq	r3, [r3, #4]
 8000bc8:	1809      	addeq	r1, r1, r0
 8000bca:	6021      	streq	r1, [r4, #0]
 8000bcc:	e7ed      	b.n	8000baa <_free_r+0x1e>
 8000bce:	461a      	mov	r2, r3
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	b10b      	cbz	r3, 8000bd8 <_free_r+0x4c>
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d9fa      	bls.n	8000bce <_free_r+0x42>
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	1850      	adds	r0, r2, r1
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	d10b      	bne.n	8000bf8 <_free_r+0x6c>
 8000be0:	6820      	ldr	r0, [r4, #0]
 8000be2:	4401      	add	r1, r0
 8000be4:	1850      	adds	r0, r2, r1
 8000be6:	4283      	cmp	r3, r0
 8000be8:	6011      	str	r1, [r2, #0]
 8000bea:	d1e0      	bne.n	8000bae <_free_r+0x22>
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	6053      	str	r3, [r2, #4]
 8000bf2:	4408      	add	r0, r1
 8000bf4:	6010      	str	r0, [r2, #0]
 8000bf6:	e7da      	b.n	8000bae <_free_r+0x22>
 8000bf8:	d902      	bls.n	8000c00 <_free_r+0x74>
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	602b      	str	r3, [r5, #0]
 8000bfe:	e7d6      	b.n	8000bae <_free_r+0x22>
 8000c00:	6820      	ldr	r0, [r4, #0]
 8000c02:	1821      	adds	r1, r4, r0
 8000c04:	428b      	cmp	r3, r1
 8000c06:	bf04      	itt	eq
 8000c08:	6819      	ldreq	r1, [r3, #0]
 8000c0a:	685b      	ldreq	r3, [r3, #4]
 8000c0c:	6063      	str	r3, [r4, #4]
 8000c0e:	bf04      	itt	eq
 8000c10:	1809      	addeq	r1, r1, r0
 8000c12:	6021      	streq	r1, [r4, #0]
 8000c14:	6054      	str	r4, [r2, #4]
 8000c16:	e7ca      	b.n	8000bae <_free_r+0x22>
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000230 	.word	0x20000230

08000c20 <sbrk_aligned>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4e0e      	ldr	r6, [pc, #56]	; (8000c5c <sbrk_aligned+0x3c>)
 8000c24:	460c      	mov	r4, r1
 8000c26:	6831      	ldr	r1, [r6, #0]
 8000c28:	4605      	mov	r5, r0
 8000c2a:	b911      	cbnz	r1, 8000c32 <sbrk_aligned+0x12>
 8000c2c:	f000 f9d2 	bl	8000fd4 <_sbrk_r>
 8000c30:	6030      	str	r0, [r6, #0]
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	f000 f9cd 	bl	8000fd4 <_sbrk_r>
 8000c3a:	1c43      	adds	r3, r0, #1
 8000c3c:	d00a      	beq.n	8000c54 <sbrk_aligned+0x34>
 8000c3e:	1cc4      	adds	r4, r0, #3
 8000c40:	f024 0403 	bic.w	r4, r4, #3
 8000c44:	42a0      	cmp	r0, r4
 8000c46:	d007      	beq.n	8000c58 <sbrk_aligned+0x38>
 8000c48:	1a21      	subs	r1, r4, r0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f000 f9c2 	bl	8000fd4 <_sbrk_r>
 8000c50:	3001      	adds	r0, #1
 8000c52:	d101      	bne.n	8000c58 <sbrk_aligned+0x38>
 8000c54:	f04f 34ff 	mov.w	r4, #4294967295
 8000c58:	4620      	mov	r0, r4
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	20000234 	.word	0x20000234

08000c60 <_malloc_r>:
 8000c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c64:	1ccd      	adds	r5, r1, #3
 8000c66:	f025 0503 	bic.w	r5, r5, #3
 8000c6a:	3508      	adds	r5, #8
 8000c6c:	2d0c      	cmp	r5, #12
 8000c6e:	bf38      	it	cc
 8000c70:	250c      	movcc	r5, #12
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	4607      	mov	r7, r0
 8000c76:	db01      	blt.n	8000c7c <_malloc_r+0x1c>
 8000c78:	42a9      	cmp	r1, r5
 8000c7a:	d905      	bls.n	8000c88 <_malloc_r+0x28>
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	2600      	movs	r6, #0
 8000c82:	4630      	mov	r0, r6
 8000c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d5c <_malloc_r+0xfc>
 8000c8c:	f000 f868 	bl	8000d60 <__malloc_lock>
 8000c90:	f8d8 3000 	ldr.w	r3, [r8]
 8000c94:	461c      	mov	r4, r3
 8000c96:	bb5c      	cbnz	r4, 8000cf0 <_malloc_r+0x90>
 8000c98:	4629      	mov	r1, r5
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	f7ff ffc0 	bl	8000c20 <sbrk_aligned>
 8000ca0:	1c43      	adds	r3, r0, #1
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	d155      	bne.n	8000d52 <_malloc_r+0xf2>
 8000ca6:	f8d8 4000 	ldr.w	r4, [r8]
 8000caa:	4626      	mov	r6, r4
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d145      	bne.n	8000d3c <_malloc_r+0xdc>
 8000cb0:	2c00      	cmp	r4, #0
 8000cb2:	d048      	beq.n	8000d46 <_malloc_r+0xe6>
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	4638      	mov	r0, r7
 8000cba:	eb04 0903 	add.w	r9, r4, r3
 8000cbe:	f000 f989 	bl	8000fd4 <_sbrk_r>
 8000cc2:	4581      	cmp	r9, r0
 8000cc4:	d13f      	bne.n	8000d46 <_malloc_r+0xe6>
 8000cc6:	6821      	ldr	r1, [r4, #0]
 8000cc8:	1a6d      	subs	r5, r5, r1
 8000cca:	4629      	mov	r1, r5
 8000ccc:	4638      	mov	r0, r7
 8000cce:	f7ff ffa7 	bl	8000c20 <sbrk_aligned>
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	d037      	beq.n	8000d46 <_malloc_r+0xe6>
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	442b      	add	r3, r5
 8000cda:	6023      	str	r3, [r4, #0]
 8000cdc:	f8d8 3000 	ldr.w	r3, [r8]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d038      	beq.n	8000d56 <_malloc_r+0xf6>
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	42a2      	cmp	r2, r4
 8000ce8:	d12b      	bne.n	8000d42 <_malloc_r+0xe2>
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	e00f      	b.n	8000d10 <_malloc_r+0xb0>
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	1b52      	subs	r2, r2, r5
 8000cf4:	d41f      	bmi.n	8000d36 <_malloc_r+0xd6>
 8000cf6:	2a0b      	cmp	r2, #11
 8000cf8:	d917      	bls.n	8000d2a <_malloc_r+0xca>
 8000cfa:	1961      	adds	r1, r4, r5
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	6025      	str	r5, [r4, #0]
 8000d00:	bf18      	it	ne
 8000d02:	6059      	strne	r1, [r3, #4]
 8000d04:	6863      	ldr	r3, [r4, #4]
 8000d06:	bf08      	it	eq
 8000d08:	f8c8 1000 	streq.w	r1, [r8]
 8000d0c:	5162      	str	r2, [r4, r5]
 8000d0e:	604b      	str	r3, [r1, #4]
 8000d10:	4638      	mov	r0, r7
 8000d12:	f104 060b 	add.w	r6, r4, #11
 8000d16:	f000 f829 	bl	8000d6c <__malloc_unlock>
 8000d1a:	f026 0607 	bic.w	r6, r6, #7
 8000d1e:	1d23      	adds	r3, r4, #4
 8000d20:	1af2      	subs	r2, r6, r3
 8000d22:	d0ae      	beq.n	8000c82 <_malloc_r+0x22>
 8000d24:	1b9b      	subs	r3, r3, r6
 8000d26:	50a3      	str	r3, [r4, r2]
 8000d28:	e7ab      	b.n	8000c82 <_malloc_r+0x22>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	6862      	ldr	r2, [r4, #4]
 8000d2e:	d1dd      	bne.n	8000cec <_malloc_r+0x8c>
 8000d30:	f8c8 2000 	str.w	r2, [r8]
 8000d34:	e7ec      	b.n	8000d10 <_malloc_r+0xb0>
 8000d36:	4623      	mov	r3, r4
 8000d38:	6864      	ldr	r4, [r4, #4]
 8000d3a:	e7ac      	b.n	8000c96 <_malloc_r+0x36>
 8000d3c:	4634      	mov	r4, r6
 8000d3e:	6876      	ldr	r6, [r6, #4]
 8000d40:	e7b4      	b.n	8000cac <_malloc_r+0x4c>
 8000d42:	4613      	mov	r3, r2
 8000d44:	e7cc      	b.n	8000ce0 <_malloc_r+0x80>
 8000d46:	230c      	movs	r3, #12
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	f000 f80e 	bl	8000d6c <__malloc_unlock>
 8000d50:	e797      	b.n	8000c82 <_malloc_r+0x22>
 8000d52:	6025      	str	r5, [r4, #0]
 8000d54:	e7dc      	b.n	8000d10 <_malloc_r+0xb0>
 8000d56:	605b      	str	r3, [r3, #4]
 8000d58:	deff      	udf	#255	; 0xff
 8000d5a:	bf00      	nop
 8000d5c:	20000230 	.word	0x20000230

08000d60 <__malloc_lock>:
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <__malloc_lock+0x8>)
 8000d62:	f7ff bf10 	b.w	8000b86 <__retarget_lock_acquire_recursive>
 8000d66:	bf00      	nop
 8000d68:	2000022c 	.word	0x2000022c

08000d6c <__malloc_unlock>:
 8000d6c:	4801      	ldr	r0, [pc, #4]	; (8000d74 <__malloc_unlock+0x8>)
 8000d6e:	f7ff bf0b 	b.w	8000b88 <__retarget_lock_release_recursive>
 8000d72:	bf00      	nop
 8000d74:	2000022c 	.word	0x2000022c

08000d78 <__sflush_r>:
 8000d78:	898a      	ldrh	r2, [r1, #12]
 8000d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7c:	4605      	mov	r5, r0
 8000d7e:	0710      	lsls	r0, r2, #28
 8000d80:	460c      	mov	r4, r1
 8000d82:	d457      	bmi.n	8000e34 <__sflush_r+0xbc>
 8000d84:	684b      	ldr	r3, [r1, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dc04      	bgt.n	8000d94 <__sflush_r+0x1c>
 8000d8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dc01      	bgt.n	8000d94 <__sflush_r+0x1c>
 8000d90:	2000      	movs	r0, #0
 8000d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d0fa      	beq.n	8000d90 <__sflush_r+0x18>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000da0:	682f      	ldr	r7, [r5, #0]
 8000da2:	6a21      	ldr	r1, [r4, #32]
 8000da4:	602b      	str	r3, [r5, #0]
 8000da6:	d032      	beq.n	8000e0e <__sflush_r+0x96>
 8000da8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000daa:	89a3      	ldrh	r3, [r4, #12]
 8000dac:	075a      	lsls	r2, r3, #29
 8000dae:	d505      	bpl.n	8000dbc <__sflush_r+0x44>
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	1ac0      	subs	r0, r0, r3
 8000db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000db6:	b10b      	cbz	r3, 8000dbc <__sflush_r+0x44>
 8000db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dba:	1ac0      	subs	r0, r0, r3
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dc2:	6a21      	ldr	r1, [r4, #32]
 8000dc4:	4628      	mov	r0, r5
 8000dc6:	47b0      	blx	r6
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	89a3      	ldrh	r3, [r4, #12]
 8000dcc:	d106      	bne.n	8000ddc <__sflush_r+0x64>
 8000dce:	6829      	ldr	r1, [r5, #0]
 8000dd0:	291d      	cmp	r1, #29
 8000dd2:	d82b      	bhi.n	8000e2c <__sflush_r+0xb4>
 8000dd4:	4a28      	ldr	r2, [pc, #160]	; (8000e78 <__sflush_r+0x100>)
 8000dd6:	410a      	asrs	r2, r1
 8000dd8:	07d6      	lsls	r6, r2, #31
 8000dda:	d427      	bmi.n	8000e2c <__sflush_r+0xb4>
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6062      	str	r2, [r4, #4]
 8000de0:	04d9      	lsls	r1, r3, #19
 8000de2:	6922      	ldr	r2, [r4, #16]
 8000de4:	6022      	str	r2, [r4, #0]
 8000de6:	d504      	bpl.n	8000df2 <__sflush_r+0x7a>
 8000de8:	1c42      	adds	r2, r0, #1
 8000dea:	d101      	bne.n	8000df0 <__sflush_r+0x78>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	b903      	cbnz	r3, 8000df2 <__sflush_r+0x7a>
 8000df0:	6560      	str	r0, [r4, #84]	; 0x54
 8000df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000df4:	602f      	str	r7, [r5, #0]
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d0ca      	beq.n	8000d90 <__sflush_r+0x18>
 8000dfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	d002      	beq.n	8000e08 <__sflush_r+0x90>
 8000e02:	4628      	mov	r0, r5
 8000e04:	f7ff fec2 	bl	8000b8c <_free_r>
 8000e08:	2000      	movs	r0, #0
 8000e0a:	6360      	str	r0, [r4, #52]	; 0x34
 8000e0c:	e7c1      	b.n	8000d92 <__sflush_r+0x1a>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	4628      	mov	r0, r5
 8000e12:	47b0      	blx	r6
 8000e14:	1c41      	adds	r1, r0, #1
 8000e16:	d1c8      	bne.n	8000daa <__sflush_r+0x32>
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0c5      	beq.n	8000daa <__sflush_r+0x32>
 8000e1e:	2b1d      	cmp	r3, #29
 8000e20:	d001      	beq.n	8000e26 <__sflush_r+0xae>
 8000e22:	2b16      	cmp	r3, #22
 8000e24:	d101      	bne.n	8000e2a <__sflush_r+0xb2>
 8000e26:	602f      	str	r7, [r5, #0]
 8000e28:	e7b2      	b.n	8000d90 <__sflush_r+0x18>
 8000e2a:	89a3      	ldrh	r3, [r4, #12]
 8000e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e30:	81a3      	strh	r3, [r4, #12]
 8000e32:	e7ae      	b.n	8000d92 <__sflush_r+0x1a>
 8000e34:	690f      	ldr	r7, [r1, #16]
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d0aa      	beq.n	8000d90 <__sflush_r+0x18>
 8000e3a:	0793      	lsls	r3, r2, #30
 8000e3c:	680e      	ldr	r6, [r1, #0]
 8000e3e:	bf08      	it	eq
 8000e40:	694b      	ldreq	r3, [r1, #20]
 8000e42:	600f      	str	r7, [r1, #0]
 8000e44:	bf18      	it	ne
 8000e46:	2300      	movne	r3, #0
 8000e48:	1bf6      	subs	r6, r6, r7
 8000e4a:	608b      	str	r3, [r1, #8]
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	dd9f      	ble.n	8000d90 <__sflush_r+0x18>
 8000e50:	6a21      	ldr	r1, [r4, #32]
 8000e52:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000e56:	4633      	mov	r3, r6
 8000e58:	463a      	mov	r2, r7
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	47e0      	blx	ip
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	dc06      	bgt.n	8000e70 <__sflush_r+0xf8>
 8000e62:	89a3      	ldrh	r3, [r4, #12]
 8000e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e68:	81a3      	strh	r3, [r4, #12]
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	e790      	b.n	8000d92 <__sflush_r+0x1a>
 8000e70:	4407      	add	r7, r0
 8000e72:	1a36      	subs	r6, r6, r0
 8000e74:	e7ea      	b.n	8000e4c <__sflush_r+0xd4>
 8000e76:	bf00      	nop
 8000e78:	dfbffffe 	.word	0xdfbffffe

08000e7c <_fflush_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	690b      	ldr	r3, [r1, #16]
 8000e80:	4605      	mov	r5, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	b913      	cbnz	r3, 8000e8c <_fflush_r+0x10>
 8000e86:	2500      	movs	r5, #0
 8000e88:	4628      	mov	r0, r5
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
 8000e8c:	b118      	cbz	r0, 8000e96 <_fflush_r+0x1a>
 8000e8e:	6a03      	ldr	r3, [r0, #32]
 8000e90:	b90b      	cbnz	r3, 8000e96 <_fflush_r+0x1a>
 8000e92:	f7ff fc95 	bl	80007c0 <__sinit>
 8000e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f3      	beq.n	8000e86 <_fflush_r+0xa>
 8000e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ea0:	07d0      	lsls	r0, r2, #31
 8000ea2:	d404      	bmi.n	8000eae <_fflush_r+0x32>
 8000ea4:	0599      	lsls	r1, r3, #22
 8000ea6:	d402      	bmi.n	8000eae <_fflush_r+0x32>
 8000ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eaa:	f7ff fe6c 	bl	8000b86 <__retarget_lock_acquire_recursive>
 8000eae:	4628      	mov	r0, r5
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	f7ff ff61 	bl	8000d78 <__sflush_r>
 8000eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000eb8:	07da      	lsls	r2, r3, #31
 8000eba:	4605      	mov	r5, r0
 8000ebc:	d4e4      	bmi.n	8000e88 <_fflush_r+0xc>
 8000ebe:	89a3      	ldrh	r3, [r4, #12]
 8000ec0:	059b      	lsls	r3, r3, #22
 8000ec2:	d4e1      	bmi.n	8000e88 <_fflush_r+0xc>
 8000ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ec6:	f7ff fe5f 	bl	8000b88 <__retarget_lock_release_recursive>
 8000eca:	e7dd      	b.n	8000e88 <_fflush_r+0xc>

08000ecc <__swhatbuf_r>:
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	460c      	mov	r4, r1
 8000ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	b096      	sub	sp, #88	; 0x58
 8000ed8:	4615      	mov	r5, r2
 8000eda:	461e      	mov	r6, r3
 8000edc:	da0d      	bge.n	8000efa <__swhatbuf_r+0x2e>
 8000ede:	89a3      	ldrh	r3, [r4, #12]
 8000ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ee4:	f04f 0100 	mov.w	r1, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000eee:	2340      	movne	r3, #64	; 0x40
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	6031      	str	r1, [r6, #0]
 8000ef4:	602b      	str	r3, [r5, #0]
 8000ef6:	b016      	add	sp, #88	; 0x58
 8000ef8:	bd70      	pop	{r4, r5, r6, pc}
 8000efa:	466a      	mov	r2, sp
 8000efc:	f000 f848 	bl	8000f90 <_fstat_r>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	dbec      	blt.n	8000ede <__swhatbuf_r+0x12>
 8000f04:	9901      	ldr	r1, [sp, #4]
 8000f06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000f0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f0e:	4259      	negs	r1, r3
 8000f10:	4159      	adcs	r1, r3
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	e7eb      	b.n	8000ef0 <__swhatbuf_r+0x24>

08000f18 <__smakebuf_r>:
 8000f18:	898b      	ldrh	r3, [r1, #12]
 8000f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f1c:	079d      	lsls	r5, r3, #30
 8000f1e:	4606      	mov	r6, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	d507      	bpl.n	8000f34 <__smakebuf_r+0x1c>
 8000f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f28:	6023      	str	r3, [r4, #0]
 8000f2a:	6123      	str	r3, [r4, #16]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6163      	str	r3, [r4, #20]
 8000f30:	b002      	add	sp, #8
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
 8000f34:	ab01      	add	r3, sp, #4
 8000f36:	466a      	mov	r2, sp
 8000f38:	f7ff ffc8 	bl	8000ecc <__swhatbuf_r>
 8000f3c:	9900      	ldr	r1, [sp, #0]
 8000f3e:	4605      	mov	r5, r0
 8000f40:	4630      	mov	r0, r6
 8000f42:	f7ff fe8d 	bl	8000c60 <_malloc_r>
 8000f46:	b948      	cbnz	r0, 8000f5c <__smakebuf_r+0x44>
 8000f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f4c:	059a      	lsls	r2, r3, #22
 8000f4e:	d4ef      	bmi.n	8000f30 <__smakebuf_r+0x18>
 8000f50:	f023 0303 	bic.w	r3, r3, #3
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	81a3      	strh	r3, [r4, #12]
 8000f5a:	e7e3      	b.n	8000f24 <__smakebuf_r+0xc>
 8000f5c:	89a3      	ldrh	r3, [r4, #12]
 8000f5e:	6020      	str	r0, [r4, #0]
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	81a3      	strh	r3, [r4, #12]
 8000f66:	9b00      	ldr	r3, [sp, #0]
 8000f68:	6163      	str	r3, [r4, #20]
 8000f6a:	9b01      	ldr	r3, [sp, #4]
 8000f6c:	6120      	str	r0, [r4, #16]
 8000f6e:	b15b      	cbz	r3, 8000f88 <__smakebuf_r+0x70>
 8000f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f74:	4630      	mov	r0, r6
 8000f76:	f000 f81d 	bl	8000fb4 <_isatty_r>
 8000f7a:	b128      	cbz	r0, 8000f88 <__smakebuf_r+0x70>
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	81a3      	strh	r3, [r4, #12]
 8000f88:	89a3      	ldrh	r3, [r4, #12]
 8000f8a:	431d      	orrs	r5, r3
 8000f8c:	81a5      	strh	r5, [r4, #12]
 8000f8e:	e7cf      	b.n	8000f30 <__smakebuf_r+0x18>

08000f90 <_fstat_r>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4d07      	ldr	r5, [pc, #28]	; (8000fb0 <_fstat_r+0x20>)
 8000f94:	2300      	movs	r3, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	602b      	str	r3, [r5, #0]
 8000f9e:	f7ff fafd 	bl	800059c <_fstat>
 8000fa2:	1c43      	adds	r3, r0, #1
 8000fa4:	d102      	bne.n	8000fac <_fstat_r+0x1c>
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	b103      	cbz	r3, 8000fac <_fstat_r+0x1c>
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	bd38      	pop	{r3, r4, r5, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000228 	.word	0x20000228

08000fb4 <_isatty_r>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4d06      	ldr	r5, [pc, #24]	; (8000fd0 <_isatty_r+0x1c>)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	f7ff fafb 	bl	80005ba <_isatty>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d102      	bne.n	8000fce <_isatty_r+0x1a>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	b103      	cbz	r3, 8000fce <_isatty_r+0x1a>
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	20000228 	.word	0x20000228

08000fd4 <_sbrk_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	; (8000ff0 <_sbrk_r+0x1c>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	f7ff fb02 	bl	80005e8 <_sbrk>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_sbrk_r+0x1a>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_sbrk_r+0x1a>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	20000228 	.word	0x20000228

08000ff4 <_init>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

08001000 <_fini>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	bf00      	nop
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr
